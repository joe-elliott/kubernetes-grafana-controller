/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubernetes-grafana-controller/pkg/apis/grafana/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// NotificationChannelLister helps list NotificationChannels.
type NotificationChannelLister interface {
	// List lists all NotificationChannels in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.NotificationChannel, err error)
	// NotificationChannels returns an object that can list and get NotificationChannels.
	NotificationChannels(namespace string) NotificationChannelNamespaceLister
	NotificationChannelListerExpansion
}

// notificationChannelLister implements the NotificationChannelLister interface.
type notificationChannelLister struct {
	indexer cache.Indexer
}

// NewNotificationChannelLister returns a new NotificationChannelLister.
func NewNotificationChannelLister(indexer cache.Indexer) NotificationChannelLister {
	return &notificationChannelLister{indexer: indexer}
}

// List lists all NotificationChannels in the indexer.
func (s *notificationChannelLister) List(selector labels.Selector) (ret []*v1alpha1.NotificationChannel, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.NotificationChannel))
	})
	return ret, err
}

// NotificationChannels returns an object that can list and get NotificationChannels.
func (s *notificationChannelLister) NotificationChannels(namespace string) NotificationChannelNamespaceLister {
	return notificationChannelNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// NotificationChannelNamespaceLister helps list and get NotificationChannels.
type NotificationChannelNamespaceLister interface {
	// List lists all NotificationChannels in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.NotificationChannel, err error)
	// Get retrieves the NotificationChannel from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.NotificationChannel, error)
	NotificationChannelNamespaceListerExpansion
}

// notificationChannelNamespaceLister implements the NotificationChannelNamespaceLister
// interface.
type notificationChannelNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all NotificationChannels in the indexer for a given namespace.
func (s notificationChannelNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.NotificationChannel, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.NotificationChannel))
	})
	return ret, err
}

// Get retrieves the NotificationChannel from the indexer for a given namespace and name.
func (s notificationChannelNamespaceLister) Get(name string) (*v1alpha1.NotificationChannel, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("notificationchannel"), name)
	}
	return obj.(*v1alpha1.NotificationChannel), nil
}
